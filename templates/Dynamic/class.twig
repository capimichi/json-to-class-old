<?php

namespace {{ class.namespace }};

use JMS\Serializer\Annotation as Serializer;

/**
 * Class {{ class.getUcName }}
 *
 * @Serializer\ExclusionPolicy("none")
 */
class {{ class.getUcName }}
{

{% for property in class.properties %}
    {% if property.isArray %}
        {% if property.getType == 'mixed' %}
            {% set typeString = "array" %}
            {% set varTypeString = "array" %}
        {% else %}
            {% set typeString = "array<#{property.getType}>" %}
            {% set varTypeString = "#{property.getCleanType}[]" %}
        {% endif %}
    {% else %}
        {% set typeString = property.getType %}
        {% set varTypeString = property.getCleanType %}
    {% endif %}
/**
{% if property.type == 'unknown' %}
     * @var mixed|null
     * @Serializer\Exclude
     * TODO: Find out type for
     *  {{ class.namespace }}\{{ class.getUcName }}::{{ property.getKey }}
{% else %}
     * @var {{ varTypeString | raw }}|null
     * @Serializer\Type("{{ typeString | raw }}")
     * @Serializer\SerializedName("{{ property.getKey }}")
{% endif %}
     */
    protected ${{ property.getCleanName }}{% if property.type == "array" %} = []{% endif %};

{% endfor %}
{% for property in class.properties %}

{% if property.isArray %}
        {% if property.getType == 'mixed' %}
            {% set typeString = "array" %}
        {% else %}
            {% set typeString = "#{property.getCleanType}[]" %}
        {% endif %}
    {% elseif property.getType == "unknown" %}
        {% set typeString = "mixed" %}
    {% else %}
        {% set typeString = property.getCleanType %}
    {% endif %}

    /**
     * @return {{ typeString | raw }}|null
     */
    public function get{{ property.getUcName }}()
    {
        return $this->{{ property.getCleanName }};
}

/**
* @param {{ typeString | raw }}|null ${{ property.getCleanName }}
*/
public function set{{ property.getUcName }}(${{ property.getCleanName }})
{
$this->{{ property.getCleanName }} = ${{ property.getCleanName }};
}

{% endfor %}

}